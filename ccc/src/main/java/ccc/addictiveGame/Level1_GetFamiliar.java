package ccc.addictiveGame;

import static ccc.addictiveGame.execute.Executor.executeFindPositionsOfValues;
import org.testng.annotations.Test;

import junit.framework.Assert;

public class Level1_GetFamiliar {

	@Test
	public void test1() {
		String result = executeFindPositionsOfValues("6 4 3 1 11 24");
		System.out.println(result);
		Assert.assertEquals("1 1 3 3 6 4 ", result);
	}

	@Test
	public void test2() {
		String result = executeFindPositionsOfValues(
				"6 4 24 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24");
		System.out.println(result);
		Assert.assertEquals(
				"1 1 1 2 1 3 1 4 2 1 2 2 2 3 2 4 3 1 3 2 3 3 3 4 4 1 4 2 4 3 4 4 5 1 5 2 5 3 5 4 6 1 6 2 6 3 6 4 ",
				result);
	}

	@Test
	public void test3() {
		String result = executeFindPositionsOfValues(
				"100 100 20 1 123 5464 5567 1055 8754 4544 5 9999 10000 5870 6988 1234 4544 5 7532 2369 7777 1111 8794");
		System.out.println(result);
		Assert.assertEquals(
				"1 1 2 23 55 64 56 67 11 55 88 54 46 44 1 5 100 99 100 100 59 70 70 88 13 34 46 44 1 5 76 32 24 69 78 77 12 11 88 94 ",
				result);
	}

	@Test
	public void test4() {
		String result = executeFindPositionsOfValues(
				
		System.out.println(result);
		Assert.assertEquals(
				"297 302 404 499 170 848 390 832 358 630 376 944 44 928 53 779 184 303 146 756 316 950 297 914 354 25 250 849 441 84 53 43 452 516 368 599 330 589 381 448 182 151 382 750 131 99 16 144 28 443 201 569 456 750 253 773 382 50 17 123 377 933 146 830 223 250 164 13 237 301 211 764 271 344 401 148 299 738 165 505 356 823 445 63 161 851 446 70 404 283 281 884 148 860 351 965 137 208 17 540 90 845 434 705 134 462 348 680 337 255 313 746 272 444 393 941 313 853 385 850 441 797 381 938 96 442 10 650 25 380 416 908 31 46 63 109 434 322 70 678 72 145 458 338 385 827 59 16 404 524 102 887 208 633 275 448 158 41 42 964 45 577 431 317 54 299 361 517 79 179 179 386 82 194 413 265 6 222 52 281 238 665 100 782 290 16 432 866 434 531 19 899 55 921 271 176 258 646 255 705 333 712 176 413 198 880 116 655 169 830 191 240 377 317 64 274 310 866 249 606 402 592 382 5 190 227 261 151 160 95 440 821 296 136 345 544 7 186 402 391 50 456 4 271 404 328 233 265 267 344 324 83 24 934 160 859 46 424 178 38 421 461 161 487 1 514 171 888 268 128 448 846 38 505 206 251 160 647 173 940 198 85 208 645 281 240 33 356 244 19 206 306 393 124 101 451 255 463 387 363 446 77 123 824 465 119 407 540 141 355 353 735 133 538 333 904 274 361 100 773 111 364 372 152 383 98 282 383 247 669 435 653 166 348 203 108 295 239 212 371 448 809 346 518 380 704 268 27 136 688 97 309 136 237 258 250 333 171 195 81 353 326 117 604 341 276 419 11 32 71 335 582 364 433 442 539 426 93 465 762 150 830 83 922 167 204 270 554 462 10 252 226 286 215 43 873 147 562 253 141 399 658 245 478 118 740 172 330 223 721 220 662 142 8 315 616 158 106 395 637 251 854 426 590 267 639 111 840 269 10 244 216 263 577 371 972 418 33 21 502 82 404 292 630 36 232 408 543 253 94 311 142 315 303 332 580 198 454 467 827 447 643 228 327 381 491 105 860 49 578 166 362 313 935 148 119 240 76 87 548 145 863 323 283 50 135 89 654 381 52 115 56 34 583 76 672 364 870 356 667 51 529 318 709 102 224 299 949 139 409 266 869 435 208 194 713 139 217 6 430 28 271 460 785 61 406 253 325 142 531 465 265 268 551 258 857 227 776 64 756 349 432 352 831 43 99 90 857 382 369 322 119 2 382 177 934 26 378 81 939 340 460 20 779 306 382 38 524 84 704 85 332 210 859 242 552 269 238 96 9 369 139 182 140 211 112 82 929 84 14 60 676 174 78 191 272 370 294 162 526 ",
				result);
	}
}